1.Lucene是apache软件基金会jakarta项目组的一个子项目,是一个开放源代码的全文检索引擎工具包,但它不是一个完整的全文检索引擎,而是一个全文检索引擎的架构,提供了完整的
查询引擎和索引引擎,部分文本分析引擎(英文与德文两种西方语言).Lucene的目的是为软件开发人员提供一个简单易用的工具包,以方便的在目标系统中实现全文检索的功能,或者是以此
为基础建立起完整的全文检索引擎.Lucene是一套用于全文检索和搜寻的开源程式库,由Apache软件基金会支持和提供.Lucene提供了一个简单却强大的应用程式接口,能够做全文索引和搜寻.
在Java开发环境里Lucene是一个成熟的免费开源工具.就其本身而言,Lucene是当前以及最近几年最受欢迎的免费Java信息检索程序库.人们经常提到信息检索程序库,虽然与搜索引擎有关,
但不应该将信息检索程序库与搜索引擎相混淆.

Lucene是一个基于Java的全文信息检索工具包,它不是一个完整的搜索应用程序,而是为你的应用程序提供索引和搜索功能.Lucene目前是 Apache Jakarta家族中的一个开源项目.也是目前最为
流行的基于Java开源全文检索工具包.

目前已经有很多应用程序的搜索功能是基于 Lucene的,比如 Eclipse的帮助系统的搜索功能.Lucene能够为文本类型的数据建立索引,所以你只要能把你要索引的数据格式转化的文本的,Lucene就能
对你的文档进行索引和搜索.比如你要对一些 HTML文档,PDF文档进行索引的话你就首先需要把 HTML文档和 PDF文档转化成文本格式的,然后将转化后的内容交给 Lucene进行索引,然后把创建好的索引文件
保存到磁盘或者内存中,最后根据用户输入的查询条件在索引文件上进行查询.不指定要索引的文档的格式也使 Lucene能够几乎适用于所有的搜索应用程序.

2.Lucene	中文名：全文搜索引擎	类属：搜索引擎
			外文名：Lucene		开发人：Doug Cutting			开发时间：2000年
3.创始人:Lucene['lusen]的原作者是Doug Cutting,他是一位资深全文索引/检索专家,曾经是V-Twin搜索引擎的主要开发者,后在Excite担任高级系统架构设计师,当前从事于一些Internet
底层架构的研究.早先发布在作者自己的博客上,他贡献出Lucene的目标是为各种中小型应用程式加入全文检索功能.后来发布在SourceForge,2001年年底成为apache软件基金会jakarta的一个
子项目.
4.Lucene是一个高性能、可伸缩的信息搜索(IR)库.它可以为你的应用程序添加索引和搜索能力.Lucene是用java实现的、成熟的开源项目,是著名的Apache Jakarta大家庭的一员,并且基于
Apache软件许可 [ASF,License].同样,Lucene是当前非常流行的、免费的Java信息搜索(IR)库.

5.倒排索引:
*英文原名Inverted index,大概因为Invert有颠倒的意思,就被翻译成了倒排.但是倒排这个名称很容易让人理解为从A-Z颠倒成Z-A.
个人认为翻译成转置索引可能比较合适.一个未经处理的数据库中,一般是以文档ID作为索引,以文档内容作为记录.而Inverted index指的是将单词或记录作为索引,将文档ID作为记录,
这样便可以方便地通过单词或记录查找到其所在的文档.

*我喜欢叫她"反向索引"(索引那么萌的东西,当然要用"她"啦！^_^).
常规的索引是文档到关键词的映射：
文档————>关键词
但是这样检索关键词的时候很费力,要一个文档一个文档的遍历一遍.(这事不能忍~)
于是人们发明了倒排索引~
倒排索引是关键词到文档的映射
关键词————>文档
这样,只要有关键词,立马就能找到她在那个文档里出现过,剩下的事就是把她揪出来了~~~
可能是因为将正常的索引倒过来了吧,所以大家叫他倒排索引,可我依然喜欢叫他反向索引~

*---------------------------导语---------------------------
倒排索引,好像大家都这么叫.
倒排索引对应的英文术语为inverted index,有的papers里也成为inverted files,说的都是同一种东西.倒排索引是区别于正排索引(forward index)来说的.
---------------------------我是正文---------------------------
文档是有许多的单词组成的,其中每个单词也可以在同一个文档中重复出现很多次,当然,同一个单词也可以出现在不同的文档中.
正排索引(forward index):从文档角度看其中的单词,表示每个文档(用文档ID标识)都含有哪些单词,以及每个单词出现了多少次(词频)及其出现位置(相对于文档首部的偏移量).
倒排索引(inverted index或inverted files):从单词角度看文档,标识每个单词分别在那些文档中出现(文档ID),以及在各自的文档中每个单词分别出现了多少次(词频)及其出现位置(相对于该文档首部的偏移量).
简单记为:
	正排索引:文档 ---> 单词
	倒排索引:单词 ---> 文档
---------------------------结语---------------------------
倒排索引有着广泛的应用场景,比如搜索引擎、大规模数据库索引、文档检索、多媒体检索/信息检索领域等等.总之,倒排索引在检索领域是很重要的一种索引机制.

6.全文检索
比如,我们一个文件夹中,或者一个磁盘中有很多的文件,记事本、world、Excel、pdf,我们想根据其中的关键词搜索包含的文件.例如,我们输入Lucene,所有内容含有Lucene的文件就会被检查出来,这就是所谓的全文检索.

7.Lucene的使用主要体现在两个步骤:
	1.创建索引,通过IndexWriter对不同的文件进行索引的创建,并将其保存在索引相关文件存储的位置中.
	2.通过索引查寻关键字相关文档。
	
8.索引和搜索
索引是现代搜索引擎的核心,建立索引的过程就是把源数据处理成非常方便查询的索引文件的过程.为什么索引这么重要呢,试想你现在要在大量的文档中搜索含有某个关键词的文档,那么如果不建立索引的话你就需要把这些文档
顺序的读入内存,然后检查这个文章中是不是含有要查找的关键词,这样的话就会耗费非常多的时间,想想搜索引擎可是在毫秒级的时间内查找出要搜索的结果的.这就是由于建立了索引的原因,你可以把索引想象成这样一种数据结构,他能够
使你快速的随机访问存储在索引中的关键词,进而找到该关键词所关联的文档.Lucene采用的是一种称为反向索引(inverted index)的机制.反向索引就是说我们维护了一个词 / 短语表,对于这个表中的每个词 / 短语,都有一个链表描述了
有哪些文档包含了这个词 / 短语.这样在用户输入查询条件的时候,就能非常快的得到搜索结果.我们将在本系列文章的第二部分详细介绍 Lucene的索引机制,由于 Lucene提供了简单易用的 API,所以即使读者刚开始对全文本进行索引的机制并不
太了解,也可以非常容易的使用 Lucene对你的文档实现索引.

对文档建立好索引后，就可以在这些索引上面进行搜索了.搜索引擎首先会对搜索的关键词进行解析,然后再在建立好的索引上面进行查找,最终返回和用户输入的关键词相关联的文档.

9.Lucene 软件包分析
Lucene软件包的发布形式是一个JAR文件,下面我们分析一下这个JAR文件里面的主要的JAVA包,使读者对之有个初步的了解.
Package: org.apache.lucene.document
这个包提供了一些为封装要索引的文档所需要的类,比如 Document,Field.这样,每一个文档最终被封装成了一个Document对象.
Package: org.apache.lucene.analysis
这个包主要功能是对文档进行分词,因为文档在建立索引之前必须要进行分词,所以这个包的作用可以看成是为建立索引做准备工作.
Package: org.apache.lucene.index
这个包提供了一些类来协助创建索引以及对创建好的索引进行更新.这里面有两个基础的类:IndexWriter和 IndexReader,其中IndexWriter是用来创建索引并添加文档到索引中的,IndexReader是用来删除索引中的文档的.
Package: org.apache.lucene.search
这个包提供了对在建立好的索引上进行搜索所需要的类.比如 IndexSearcher和 Hits,IndexSearcher定义了在指定的索引上进行搜索的方法,Hits用来保存搜索得到的结果.

10.一个简单的搜索应用程序
假设我们的电脑的目录中含有很多文本文档,我们需要查找哪些文档含有某个关键词.为了实现这种功能,我们首先利用 Lucene对这个目录中的文档建立索引,然后在建立好的索引中搜索我们所要查找的文档.通过这个例子读者
会对如何利用 Lucene构建自己的搜索应用程序有个比较清楚的认识.

11.建立索引
为了对文档进行索引,Lucene提供了五个基础的类,他们分别是 Document,Field,IndexWriter,Analyzer,Directory.下面我们分别介绍一下这五个类的用途:
Document
Document是用来描述文档的,这里的文档可以指一个HTML页面,一封电子邮件,或者是一个文本文件.一个Document对象由多个Field对象组成的.可以把一个Document对象想象成数据库中的一个记录,而每个Field对象就是记录的一个字段.
Field
Field对象是用来描述一个文档的某个属性的,比如一封电子邮件的标题和内容可以用两个Field对象分别描述.
Analyzer
在一个文档被索引之前,首先需要对文档内容进行分词处理,这部分工作就是由 Analyzer来做的.Analyzer类是一个抽象类,它有多个实现.针对不同的语言和应用需要选择适合的Analyzer.Analyzer把分词后的内容交给IndexWriter来建立索引.
IndexWriter
IndexWriter是 Lucene用来创建索引的一个核心的类,他的作用是把一个个的 Document对象加到索引中来.
Directory
这个类代表了Lucene的索引的存储的位置,这是一个抽象类,它目前有两个实现,第一个是 FSDirectory,它表示一个存储在文件系统中的索引的位置.第二个是RAMDirectory,它表示一个存储在内存当中的索引的位置.

12.搜索文档
利用Lucene进行搜索就像建立索引一样也是非常方便的.在上面一部分中,我们已经为一个目录下的文本文档建立好了索引,现在我们就要在这个索引上进行搜索以找到包含某个关键词或短语的文档.Lucene提供了几个基础的类来完成这个过程,它们
分别是呢 IndexSearcher,Term,Query,TermQuery,Hits.下面我们分别介绍这几个类的功能.
Query
这是一个抽象类,他有多个实现,比如 TermQuery,BooleanQuery,PrefixQuery.这个类的目的是把用户输入的查询字符串封装成Lucene能够识别的Query.
Term
Term 是搜索的基本单位,一个Term对象有两个String类型的域组成.生成一个Term对象可以有如下一条语句来完成:Term term = new Term(“fieldName”,”queryWord”);其中第一个参数代表了要在文档的哪一个 Field上进行查找,第二个参数代表了要查询的关键词.
TermQuery
TermQuery是抽象类Query的一个子类,它同时也是Lucene支持的最为基本的一个查询类.生成一个TermQuery对象由如下语句完成:TermQuery termQuery = new TermQuery(new Term(“fieldName”,”queryWord”));它的构造函数只接受一个参数;那就是一个 Term对象.
IndexSearcher
IndexSearcher是用来在建立好的索引上进行搜索的.它只能以只读的方式打开一个索引,所以可以有多个IndexSearcher的实例在一个索引上进行操作.
Hits
Hits是用来保存搜索的结果的.
